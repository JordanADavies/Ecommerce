// Mocks generated by Mockito 5.2.0 from annotations
// in ecommerce/test/screens/login/infrastructure/login_facade_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:ecommerce/screens/login/infrastructure/local/user_token_storage_provider.dart'
    as _i4;
import 'package:ecommerce/screens/login/infrastructure/remote/login_api.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [LoginApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginApi extends _i1.Mock implements _i2.LoginApi {
  MockLoginApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String?> login({String? username, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(
              #login, [], {#username: username, #password: password}),
          returnValue: Future<String?>.value()) as _i3.Future<String?>);
}

/// A class which mocks [UserTokenStorageProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserTokenStorageProvider extends _i1.Mock
    implements _i4.UserTokenStorageProvider {
  MockUserTokenStorageProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> saveUserToken(String? userToken) =>
      (super.noSuchMethod(Invocation.method(#saveUserToken, [userToken]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<bool> tokenExists() =>
      (super.noSuchMethod(Invocation.method(#tokenExists, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
}
