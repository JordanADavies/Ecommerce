// Mocks generated by Mockito 5.2.0 from annotations
// in ecommerce/test/screens/products/presentation/add_to_cart_button_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:bloc/bloc.dart' as _i5;
import 'package:ecommerce/screens/cart/application/cart_cubit.dart' as _i2;
import 'package:ecommerce/screens/products/domain/product.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeCartState_0 extends _i1.Fake implements _i2.CartState {}

class _Fake$ProductCopyWith_1<$Res> extends _i1.Fake
    implements _i3.$ProductCopyWith<$Res> {}

/// A class which mocks [CartCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartCubit extends _i1.Mock implements _i2.CartCubit {
  MockCartCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CartState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeCartState_0()) as _i2.CartState);
  @override
  _i4.Stream<_i2.CartState> get stream => (super.noSuchMethod(
      Invocation.getter(#stream),
      returnValue: Stream<_i2.CartState>.empty()) as _i4.Stream<_i2.CartState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i4.Future<void> fetchProducts() =>
      (super.noSuchMethod(Invocation.method(#fetchProducts, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> addProductToCart({_i3.Product? product}) =>
      (super.noSuchMethod(
          Invocation.method(#addProductToCart, [], {#product: product}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> removeProductFromCart({_i3.Product? product}) =>
      (super.noSuchMethod(
          Invocation.method(#removeProductFromCart, [], {#product: product}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void emit(_i2.CartState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i5.Change<_i2.CartState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [Product].
///
/// See the documentation for Mockito's code generation for more information.
class MockProduct extends _i1.Mock implements _i3.Product {
  MockProduct() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: 0) as int);
  @override
  String get title =>
      (super.noSuchMethod(Invocation.getter(#title), returnValue: '')
          as String);
  @override
  String get desciption =>
      (super.noSuchMethod(Invocation.getter(#desciption), returnValue: '')
          as String);
  @override
  double get price =>
      (super.noSuchMethod(Invocation.getter(#price), returnValue: 0.0)
          as double);
  @override
  String get image =>
      (super.noSuchMethod(Invocation.getter(#image), returnValue: '')
          as String);
  @override
  _i3.$ProductCopyWith<_i3.Product> get copyWith =>
      (super.noSuchMethod(Invocation.getter(#copyWith),
              returnValue: _Fake$ProductCopyWith_1<_i3.Product>())
          as _i3.$ProductCopyWith<_i3.Product>);
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}
